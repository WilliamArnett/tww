//
// Generated by dtk
// Translation Unit: d_a_obj_tntrap.cpp
//

#include "d/actor/d_a_obj_tntrap.h"
#include "d/d_a_obj.h"
#include "d/d_com_inf_game.h"
#include "d/d_procname.h"
#include "d/d_priority.h"


const char l_arcname[] = "TnTrap";

// static const cXyz l_offset_ball[2] = {
//     cXyz(-300,90,0),
//     cXyz(-300,90,0)
// };
static const f32 l_tri_src[6][3] = {
300.0, -70.0, 0.0, 
-300.0, -70.0, 0.0, 
-300.0, 55.0, 0.0, 
300.0, 55.0, 0.0, 
300.0, 180.0, 0.0, 
-300.0, 180.0, 0.0,

};
static const int l_tri_vtx[7][3] = {
    0,0x800,0x01000000,
    5,0,0,
    0,0xB00,0,
    0,0,0,
    0,0,0,
    0,0,0,
    0,0,0
};


static const f32 l_offset_ball[2][3] = {
    -300,90,0,
    300,90,0
};
static const f32 l_offset_thunder[3][3] = {
    0,25,0,
    0,85,0,
    0,145,0

};


/* 00000078-000002AC       .text chk_appear__13daObjTnTrap_cFv */
BOOL daObjTnTrap_c::chk_appear() {
    /* Nonmatching */

    int o_retval = 0;
    field_0xDC8 = param_get_swSave();
    field_0xDCC = param_get_swSave2();
    field_0xDD0 = param_get_arg0();
    field_0xDD4 = param_get_mapType();
    switch(field_0xDD4){
    case 0:
        if(dComIfGs_isEventBit(0x3A04) == 1){
            if(field_0xDC8 != 0xFF && dComIfGs_isSwitch(field_0xDC8,home.roomNo) == 1){
                if(dComIfGs_getTriforceNum() == 8 && field_0xDD0 == 0){
                    if(dComIfGs_isEventBit(0x2C01) == 1){
                        if(field_0xDCC != 0xFF && !dComIfGs_isSwitch(field_0xDCC,home.roomNo)){
                            field_0x298 = 2;
                            o_retval = 1;
                        }
                    }else{
                        field_0x298 = 1;
                        o_retval = 1;
                    }
                }
            }else{
                field_0x298 = 0;
                o_retval = 1;
            }
        }
        break;
    case 1:
        if(field_0xDC8 != 0xFF && !dComIfGs_isSwitch(field_0xDC8,home.roomNo)){
            field_0x298 = 3;
            o_retval = 1;
        }
        break;
    case 2:
        if(field_0xDC8 != 0xFF){
            if(!dComIfGs_isSwitch(field_0xDC8,home.roomNo)){
                field_0x298 = 5;
                o_retval = 1;
            }
        }else{
            field_0x298 = 5;
            o_retval = 1;       
        }
        break;
    default:   
        JUT_ASSERT(0x17C,0);
        break;
    }
    return o_retval;
}


/* 000002AC-00000344       .text set_mtx__13daObjTnTrap_cFv */
void daObjTnTrap_c::set_mtx() {

    mDoMtx_stack_c::transS(home.pos);
    mDoMtx_stack_c::XYZrotM(shape_angle);
    mDoMtx_stack_c::transM(0.0,-9000.0,-94.0);
    mDoMtx_stack_c::scaleM(scale.x,1000.0,scale.z);
    cMtx_copy(mDoMtx_stack_c::get(),field_0xD5C.calcMtx);
}

/* 00000344-00000368       .text solidHeapCB__13daObjTnTrap_cFP10fopAc_ac_c */
int daObjTnTrap_c::solidHeapCB(fopAc_ac_c*) {
    /* Nonmatching */
    return create_heap();
}

/* 00000368-000003E4       .text create_heap__13daObjTnTrap_cFv */
bool daObjTnTrap_c::create_heap() {
    /* Nonmatching */
    bool o_retval = true;
    cBgD_t* pcVar1 = (cBgD_t*)dComIfG_getObjectRes(l_arcname,0x3);
    field_0xD58 = dBgW_NewSet(pcVar1,cBgW::MOVE_BG_e,&field_0xD5C.calcMtx);
    if(field_0xD58 == NULL){
        o_retval = false;
    }
    return o_retval;

    
}

enum ZERO{
    zero = 0
};

/* 000003E4-000005F8       .text particle_set__13daObjTnTrap_cFif */
void daObjTnTrap_c::particle_set(int i_particleId, float param_2) {
    /* Nonmatching */

   cXyz ball;

    if(field_0xDE0[i_particleId] == 1){
        if(field_0xDE4[i_particleId] != param_2){
            particle_delete(i_particleId);
        }else{
            return;
        }
    }


    // if(field_0xDE0[i_particleId] == 1){
    //     if(field_0xDE4[i_particleId] == param_2){
    //         return;
    //     }
    //     particle_delete(i_particleId);
    // }else{
    //     return;
    // }
    for(int i = 0; i < 2; i++){
        if(field_0xD5C.emitterPairs[i_particleId][i] == NULL){
            ball.x = l_offset_ball[i][0];
            ball.y = l_offset_ball[i][1]+param_2;
            ball.z = l_offset_ball[i][2];
            field_0xD5C.emitterPairs[i_particleId][i] = dComIfGp_particle_set(0x82EA,&home.pos,&shape_angle);
            field_0xD5C.emitterPairs[i_particleId][i]->setEmitterTranslation(JGeometry::TVec3<f32>(ball.x,ball.y,ball.z));
        }
    }
    for(int i = 0; i < 3; i++){
        if(field_0xD5C.emitterPairs2[i_particleId][i] == NULL){
            ball.x = l_offset_thunder[i][0];
            ball.y = l_offset_thunder[i][1]+param_2;
            ball.z = l_offset_thunder[i][2];
            field_0xD5C.emitterPairs2[i_particleId][i] = dComIfGp_particle_set(0x82EB,&home.pos,&shape_angle);
            field_0xD5C.emitterPairs2[i_particleId][i]->setEmitterTranslation(JGeometry::TVec3<f32>(ball.x,ball.y,ball.z));
        }
    }
    field_0xDE4[i_particleId] = param_2;
    field_0xDE0[i_particleId] = 1;
    return;
}

/* 000005F8-000006A4       .text particle_delete__13daObjTnTrap_cFi */
void daObjTnTrap_c::particle_delete(int param_1) {
    /* Nonmatching */

    if(field_0xDE0[param_1] == 1){
        int i;
        for(i = 0; i < 2; i++){
            if(field_0xD5C.emitterPairs[param_1][i] != 0){
                field_0xD5C.emitterPairs[param_1][i]->becomeInvalidEmitter();
                field_0xD5C.emitterPairs[param_1][i] = NULL;
            }
        }
        for(i = 0; i < 3; i++){
            if(field_0xD5C.emitterPairs2[param_1][i] != 0){
                field_0xD5C.emitterPairs2[param_1][i]->becomeInvalidEmitter();
                field_0xD5C.emitterPairs2[param_1][i] = NULL;
            }
        }
    }
    field_0xDE0[param_1] = 0;
    return;
    
}

/* 000006A4-0000072C       .text set_se__13daObjTnTrap_cFv */
void daObjTnTrap_c::set_se() {
    /* Nonmatching */
    if(field_0xDC0 >= 5 || field_0xDC0 < 1){
        return;
    }
    fopAcM_seStartCurrent(this,0x6239,0);

}

/* 0000072C-000008A0       .text set_tri__13daObjTnTrap_cFi */
void daObjTnTrap_c::set_tri(int) {
    /* Nonmatching */
    volatile f32 uvar1 = l_tri_vtx[0][0];
}

/* 000008A0-00000A10       .text chk_event_flg__13daObjTnTrap_cFv */
void daObjTnTrap_c::chk_event_flg() {
    /* Nonmatching */
}

/* 00000A10-00000A98       .text set_em_set_offsetY__13daObjTnTrap_cFv */
void daObjTnTrap_c::set_em_set_offsetY() {
    /* Nonmatching */
}

/* 00000A98-00000C78       .text _create__13daObjTnTrap_cFv */
cPhs_State daObjTnTrap_c::_create() {
    /* Nonmatching */
    volatile f32 uvar1 = l_tri_src[0][0];
}

/* 00000F8C-00001050       .text _delete__13daObjTnTrap_cFv */
bool daObjTnTrap_c::_delete() {
    /* Nonmatching */
}

/* 00001050-00001150       .text trap_off_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::trap_off_wait_act_proc() {
    /* Nonmatching */
}

/* 00001150-00001384       .text trap_on_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::trap_on_wait_act_proc() {
    /* Nonmatching */
}

/* 00001384-00001448       .text demo_regist_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_regist_wait_act_proc() {
    /* Nonmatching */
}

/* 00001448-000014F0       .text demo_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_wait_act_proc() {
    /* Nonmatching */
}

/* 000014F0-000015B4       .text demo_wait2_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_wait2_act_proc() {
    /* Nonmatching */
}

/* 000015B4-000016A8       .text demo_end_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_end_wait_act_proc() {
    /* Nonmatching */
}

/* 000016A8-00001740       .text hide_wait_act_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::hide_wait_act_proc() {
    /* Nonmatching */
}

/* 00001740-00001744       .text dummy_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::dummy_proc() {
    /* Nonmatching */
}

/* 00001744-00001790       .text trap_off_wait_act_init_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::trap_off_wait_act_init_proc() {
    /* Nonmatching */
}

/* 00001790-000017CC       .text trap_on_wait_act_init_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::trap_on_wait_act_init_proc() {
    /* Nonmatching */
}

/* 000017CC-00001860       .text demo_regist_wait_act_init_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_regist_wait_act_init_proc() {
    /* Nonmatching */
}

/* 00001860-00001890       .text demo_wait2_act_init_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_wait2_act_init_proc() {
    /* Nonmatching */
}

/* 00001890-000018DC       .text demo_end_wait_act_init_proc__13daObjTnTrap_cFv */
void daObjTnTrap_c::demo_end_wait_act_init_proc() {
    /* Nonmatching */
}

/* 000018DC-00001AE4       .text setup_action__13daObjTnTrap_cFi */
void daObjTnTrap_c::setup_action(int) {
    /* Nonmatching */
}

/* 00001AE4-00001BE8       .text _execute__13daObjTnTrap_cFv */
bool daObjTnTrap_c::_execute() {
    /* Nonmatching */
}

/* 00001BE8-00001BF0       .text _draw__13daObjTnTrap_cFv */
bool daObjTnTrap_c::_draw() {
    /* Nonmatching */
}

/* 00001BF0-00001C10       .text daObjTnTrap_Create__FP10fopAc_ac_c */
static cPhs_State daObjTnTrap_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 00001C10-00001C34       .text daObjTnTrap_Delete__FP13daObjTnTrap_c */
static BOOL daObjTnTrap_Delete(daObjTnTrap_c*) {
    /* Nonmatching */
}

/* 00001C34-00001C58       .text daObjTnTrap_Execute__FP13daObjTnTrap_c */
static BOOL daObjTnTrap_Execute(daObjTnTrap_c*) {
    /* Nonmatching */
}

/* 00001C58-00001C7C       .text daObjTnTrap_Draw__FP13daObjTnTrap_c */
static BOOL daObjTnTrap_Draw(daObjTnTrap_c*) {
    /* Nonmatching */
}

/* 00001C7C-00001C84       .text daObjTnTrap_IsDelete__FP13daObjTnTrap_c */
static BOOL daObjTnTrap_IsDelete(daObjTnTrap_c*) {
    /* Nonmatching */
}

static actor_method_class l_daObjTnTrap_Method = {
    (process_method_func)daObjTnTrap_Create,
    (process_method_func)daObjTnTrap_Delete,
    (process_method_func)daObjTnTrap_Execute,
    (process_method_func)daObjTnTrap_IsDelete,
    (process_method_func)daObjTnTrap_Draw,
};

actor_process_profile_definition g_profile_Obj_TnTrap = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_Obj_TnTrap,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daObjTnTrap_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ PRIO_Obj_TnTrap,
    /* Actor SubMtd */ &l_daObjTnTrap_Method,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK4000_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_0_e,
};
