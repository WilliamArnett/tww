//
// Generated by dtk
// Translation Unit: d_a_obj_tapestry.cpp
//

#include "d/actor/d_a_obj_tapestry.h"
#include "d/d_com_inf_game.h"
#include "d/d_procname.h"
#include "d/d_priority.h"
#include "weak_bss_936_to_1036.h"
//#include "assets/l_matDL__d_a_obj_tapestry.h"


namespace{
static const char l_arcName_Mcrtn[] = "Mcrtn";

static const dCcD_SrcTri l_tri_src = {
    {
        /* Flags             */ 0,
        /* SrcObjAt  Type    */ 0x0000,
        /* SrcObjAt  Atp     */ 0,
        /* SrcObjAt  SPrm    */ 0x0,
        /* SrcObjTg  Type    */ 0xFF3FFEFF,
        /* SrcObjTg  SPrm    */ 9,
        /* SrcObjCo  SPrm    */ 0,
        /* SrcGObjAt Se      */ 0,
        /* SrcGObjAt HitMark */ 0x00,
        /* SrcGObjAt Spl     */ 0x0,
        /* SrcGObjAt Mtrl    */ 0,
        /* SrcGObjAt SPrm    */ 0,
        /* SrcGObjTg Se      */ 0,
        /* SrcGObjTg HitMark */ 0,
        /* SrcGObjTg Spl     */ 0,
        /* SrcGObjTg Mtrl    */ 0,
        /* SrcGObjTg SPrm    */ 0,
        /* SrcGObjCo SPrm    */ 0,
    },
    {
        /* a */ 0.0f, 0.0f, 0.0f,
        /* b */ 0.0f, 0.0f, 0.0f,
        /* c */ 0.0f, 0.0f, 0.0f,
    },
};

const double doubleToSqrt = 3400.18359375;
static f32 l_mesh_diagonal = std::sqrtf(doubleToSqrt);
const daObjTapestryAttr_c l_attr = {
    {2.0f,0.9f,0.28f,0.35f,0.4f,0.3f,0.4f,1.0f,1.5f,2.0f,-980.0f,1.0f,1.0f,1.0f,30.0f,50.0f},
    13,
    100,
    1.0f/30.0f,
    0x78,
    0.0f,
    1.0f,
    2.0f,
    2.5f
};

}

daObjTapestryDrawData_c daObjTapestryPacket_c::m_draw_data;


daObjTapestry_HIO_c l_HIO;

/* 000000EC-000001E0       .text __ct__19daObjTapestry_HIO_cFv */
daObjTapestry_HIO_c::daObjTapestry_HIO_c() {
    field_4 = -1;
    field_5 = 0;
    field_6 = 0;
    field_8 = 0;
    field_C = l_attr;
    field_68 = 1;
}


/* 000001E0-00000254       .text plight_delete__21daObjTapestryPLight_cFv */
void daObjTapestryPLight_c::plight_delete() {
    /* Nonmatching */
    if(this->field_0 == 1){
        dKy_plight_cut(&field_4);
        JPABaseEmitter* pvVar1 = field_24;
        if(pvVar1 != 0){
            pvVar1->becomeInvalidEmitter();
            field_24->setEmitterCallBackPtr(NULL);
            field_24 = NULL;

        }
        field_0 = 0;
    }
}

/* 00000254-000002B0       .text plight_move__21daObjTapestryPLight_cF4cXyz5csXyz */
void daObjTapestryPLight_c::plight_move(cXyz param_1, csXyz param_2) {
    /* Nonmatching */
    if(field_0 == 1){
        setPointLight(param_1,param_2);
    }
    return;
}

/* 000002EC-00000324       .text plight_make__21daObjTapestryPLight_cFv */
void daObjTapestryPLight_c::plight_make() {
    /* Nonmatching */
    dKy_plight_set(&field_4);
    field_0 = 1;
    return;
}

/* 00000324-00000490       .text setPointLight__21daObjTapestryPLight_cF4cXyz5csXyz */
void daObjTapestryPLight_c::setPointLight(cXyz param_1, csXyz param_2) {
    /* Nonmatching */
    cXyz local_38;
    f32 fVar3 = cM_rndF(0.5) + 1.0f;
    cLib_addCalc2(&field_28,fVar3,0.5,0.04);
    field_4.mPos = param_1;
    //field_4.mColor = GXColorS10(600,400,0x78);
    field_4.mColor.r = 600;
    field_4.mColor.g = 400;
    field_4.mColor.b = 0x78;
    s16 iVar1 = field_28 * 800.0f;
    field_4.mPower = iVar1;
    field_4.mFluctuation = 250.0f;
    if(field_28 > 1.0f){
        local_38.set(field_28 * 1.5f,field_28 * 1.5f,field_28 * 1.5f);
        if(field_24 == NULL){
            field_24 = dComIfGp_particle_setProjection(0x4004,&param_1,&param_2,&local_38);
        }else{
            field_24->setGlobalParticleScale(local_38);
            field_24->setEmitterCallBackPtr(&dPa_control_c::mKagero);
        }

    }

}

/* 00000490-00000600       .text execute__22daObjTapestryFireEff_cFP14JPABaseEmitter */
void daObjTapestryFireEff_c::execute(JPABaseEmitter* param_1) {
    /* Nonmatching */
    // cXyz a;
    // param_1->setDirection(a);
    // for(int i = 0; i <= 10; i++){
    //     a.x = 0.1f;
    // }
    // param_1->setDirection(a);
  float *pfVar1;
  f32 *pfVar2;
  float *pfVar3;
  f32 *pfVar4;
  f32 fVar5;
  float fVar6;
  f32 *pfVar7;
  float *pfVar8;
  f32 *pfVar9;
  float *pfVar10;
  int iVar11;
  cXyz local_148;
  float local_13c;
  float local_138;
  cXyz local_134[8];
  //float fStack_d8;
  float local_d4 [19];
  float local_88;
  float fStack_7c;
  float local_78 [20];
  float local_28;
  
  pfVar2 = (f32*)&(l_HIO.field_C.unkC[0]);
  f32* base = &local_134[0].x;

for (int i = 0; i < 0xB; i++) {
    local_134[i].y = l_HIO.field_C.unkC[i][0];  // from (pfVar7 + 1) -> field0_0x0[0]
    local_134[i].z = l_HIO.field_C.unkC[i][1];  // from pfVar7[2]
    // .x is left uninitialized
}

  iVar11 = 0xb;
  //pfVar1 = &local_134;
  pfVar3 = &fStack_7c;
  do {
    pfVar10 = pfVar3;
    pfVar8 = pfVar1;
    fVar6 = pfVar8[2];
    pfVar10[1] = pfVar8[1];
    pfVar10[2] = fVar6;
    iVar11 = iVar11 + -1;
    pfVar1 = pfVar8 + 2;
    pfVar3 = pfVar10 + 2;
  } while (iVar11 != 0);
  pfVar10[3] = pfVar8[3];
  iVar11 = 0xb;
  //pfVar1 = &local_134;
 // pfVar3 = &fStack_d8;
  do {
    pfVar10 = pfVar3;
    pfVar8 = pfVar1;
    fVar6 = pfVar8[2];
    pfVar10[1] = pfVar8[1];
    pfVar10[2] = fVar6;
    iVar11 = iVar11 + -1;
    pfVar1 = pfVar8 + 2;
    pfVar3 = pfVar10 + 2;
  } while (iVar11 != 0);
  pfVar10[3] = pfVar8[3];
  local_148 = unk20*local_88;
  local_138 = local_148.y;
  local_134[0].x = -local_28;
  local_13c = local_134[0].x;
  if ((local_134[0].x <= local_148.x) && (local_13c = local_148.x, local_28 < local_148.x)) {
    local_13c = local_28;
  }
//   if ((local_134 <= local_148.z) && (local_134[0].x = local_148.z, local_28 < local_148.z)) {
//     local_134 = local_28;
//   }
  (param_1->mEmitterDir).x = local_13c;
  (param_1->mEmitterDir).y = 0.1;
  (param_1->mEmitterDir).z = local_134[0].x;
  execute(param_1);
  return;


}

/* 00000600-00000638       .text __ct__23daObjTapestryDrawData_cFv */
daObjTapestryDrawData_c::daObjTapestryDrawData_c() {
    ct_tex();
    ct_dl();
    return;
}

/* 00000638-000006C8       .text ct_tex__23daObjTapestryDrawData_cFv */
void daObjTapestryDrawData_c::ct_tex() {
    for(int i = 0, offset = 0; i < 8; i++){
        f32 v = i*0.14285715f;
        for(int j = 0; j < 6; offset += 2){
            f32 u = j*0.2f;
            array[offset+0] = u;
            array[offset+1] = v;
            j++;
        }
    }
}


const u32 l_dl_size = 0x185;


static const u8 begin_data[3] = {0x98,0x00,0x0C};
static const u8 temp_clr = 0;

/* 000006C8-00000878       .text ct_dl__23daObjTapestryDrawData_cFv */
void daObjTapestryDrawData_c::ct_dl() {
    /* Nonmatching */

    char local_38[4];
    u8 local_34[2];
    int now = 0;
    for(int i = 0; i < 7; ++i){
        memcpy(&m_dl[now],&begin_data,3);
        local_34[0] = 0;
        local_34[1] =
        now += 3;
        for(int j = 0; j < 6; j++){
            for(int k = 0; k < 2; k++){
                char cVar1 = j + 4*k;
                local_34[0] = cVar1;    
                local_34[1] = cVar1;
                memcpy(&m_dl[now+0],local_34,2);
                memcpy(&m_dl[now+2],&temp_clr,1);
                local_38[0]=0;
                local_38[0]=cVar1; //gets written to twice in asm?
                memcpy(&m_dl[now+3],&local_38,1);
                now+=4;
            }
        }
    }

    for(int i = 0; i < 0x20; i++){
        m_dl[now] = 0;
        now++;
    }
    JUT_ASSERT(0x25A,(reinterpret_cast<u32>(m_dl) & 0x1f) == 0);
    JUT_ASSERT(0x25B,now == l_dl_size);
}

/* 00000878-00000C44       .text __ct__21daObjTapestryPacket_cFv */
daObjTapestryPacket_c::daObjTapestryPacket_c() {
    /* Nonmatching */

    daObjTapestryDrawVtx_c* base;
    int i,j,k;


    for(i = 0; i < 2; i++){
        base = &mDrawVtx[i];
        for(j = 0; j < 8; j++){

            for(k = 0; k < 6; k++){
                base->mBufferVtx[j][k]= cXyz::Zero;
                base->mBufferNrm[j][k] = cXyz::BaseZ;
                base->mBufferThree[j][k] = cXyz::BaseZ;                
            }
        }
    }

    for(i = 0; i < 8; i++){
        for(k = 0; k < 6; k++){
            mMoveVtx.mBuffer[i][k] = cXyz::Zero;
            unkFD0[0][i][k] = 0;
            unkFD0[1][i][k] = 0;
            unkFD0[2][i][k] = 0xFF;
        }
    }
    unk1060 = 0;
    unk1324 = 0;
    mDoMtx_identity(unk1334);
    mDoMtx_identity(unk1364);
    mDoMtx_identity(unk1394);    
    unk13C4 = 1;
    unk13C8 = cXyz::Zero;
    unk13D4 = cXyz::Zero;
    unk13E0 = 0;
    unk13E4 = cXyz::Zero;
    csXyz a;
    unk13F0 = cM_rndF(65536.0);
    unk13F2 = cM_rndF(65536.0);
    unk13F4 = cM_rndF(65536.0);    
    unk13F8 = cXyz::Zero;
    unk1404 = cXyz::Zero;
    unk1410 = cXyz::Zero;
    unk141C = cXyz::Zero;
    unk1428 = cXyz::Zero;
    unk1434 = cXyz::Zero;
    unk1440 = cXyz::Zero;
    unk144C = 0;
    unk1450 = 1.0;
    unk1454 = 0;
    unk1458.set(1.0,0.0,0.0);
    unk1464 = 0;
    unk1465 = 0;
    unk1466 = 0;
    unk1490 = 0;
    return;

}

/* 00000CC0-00000F3C       .text init__21daObjTapestryPacket_cFP15daObjTapestry_c */
void daObjTapestryPacket_c::init(daObjTapestry_c* param_1) {
    static cXyz base_z_rev(0.0,0.0,-1.0);
    setUserArea((u32)param_1);
    cXyz local_e0 = cXyz::BaseZ;
    cXyz local_ec = base_z_rev;
    cXyz local_f8;
    mDoMtx_stack_c::transS(-100.0f,-297.0f,10.0f);
    mDoMtx_stack_c::scaleM(200.f,297.0,1.0);
    local_f8.z = 0;     
    int i,j,k;

    for(i = 0; i < 2; i++){
        daObjTapestryDrawVtx_c* base = &mDrawVtx[i];
        for(j = 0; j < 8; j++){

            local_f8.y = (7-j)*(1.0f/7.0f);
            for(k = 0; k < 6; k++){
                local_f8.x = k*(1.0f/5.0f);
                cMtx_multVec(mDoMtx_stack_c::get(),&local_f8,&base->mBufferVtx[j][k]);
                base->mBufferNrm[j][k] = local_e0;
                base->mBufferThree[j][k] = local_ec;                    
            }
        }
    }
    smokeCallback_init();
    calc(param_1);
    return;

}

/* 00000F3C-00000F90       .text update__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::update() {
    /* Nonmatching */
    cMtx_concat(j3dSys.getViewMtx(),unk1334,unk1364);
    j3dSys.getDrawBuffer(0)->entryImm(this,0);
}

/* 00000F90-00001154       .text calc_acc_spring_sub__21daObjTapestryPacket_cFPC4cXyzPC4cXyzff */
int daObjTapestryPacket_c::calc_acc_spring_sub(const cXyz* param_1, const cXyz* param_2, float param_3, float param_4) {
    /* Nonmatching */
  f32 *pfVar2;
  float *pfVar3;
  f32 fVar4;
  f32 *pfVar6;

  float *pfVar8;
  int iVar9;
  float fVar10;
  cXyz cStack_114;
  float local_f0 [2];

  //volatile s32 anotherone;
  //f32 local_8c [21];
  daObjTapestry_HIO_c* attrcopy;


    cXyz diff(param_1->x-param_2->x,param_1->y-param_2->y,param_1->z-param_2->z);
    fVar10 = diff.abs();
    if (  fVar10 > 0.01f) {

    // pfVar2 = (f32*)&l_HIO.field_8;
    // pfVar6 = &fStack_98;
    volatile s32* offset = l_HIO.field_8;
    //attrcopy->field_8[20] = l_HIO.field_8[20];
    //volatile s32 anotherone = l_HIO.field_8[0x88];
    int i;
    f32 floats[8][2];
    for(i = 0; i < 0xB; i++){
    //   attrcopy->field_C.unkC[i][0] = l_HIO.field_C.unkC[i][0];
    //   attrcopy->field_C.unkC[i][1] = l_HIO.field_C.unkC[i][1];
      floats[i][0] =l_HIO.field_C.unkC[i][0];
      floats[i][1] =l_HIO.field_C.unkC[i][1];
    }
    attrcopy->field_C.unkC[i][2] = l_HIO.field_C.unkC[i][2];
    *offset = 0;
    cXyz local_fc;
    f32 local_90;
    cStack_114 = local_fc*(param_4 * (fVar10 - param_3) * -local_90);
    iVar9 = 0xb;
    // pfVar2 = (f32 *)&l_HIO.field_C;
    pfVar3 = &local_fc.z;
    do {
      pfVar8 = pfVar3;
      pfVar6 = pfVar2;
      fVar4 = pfVar6[2];
      pfVar8[1] = ((daObjTapestryAttr_c *)(pfVar6 + 1))->unkC[0][0];
      pfVar8[2] = fVar4;
      iVar9 = iVar9 + -1;
      pfVar2 = pfVar6 + 2;
      pfVar3 = pfVar8 + 2;
    } while (iVar9 != 0);
    pfVar8[3] = pfVar6[3];
    //cStack_114 = 
    unk1328 += cStack_114/(fVar10 * local_f0[0]);

  }
  return;
}

/* 00001154-000014FC       .text calc_acc_spring__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_acc_spring(int, int) {
    /* Nonmatching */
}

/* 000014FC-000015B8       .text calc_acc_gravity__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_acc_gravity() {
    /* Nonmatching */
}

/* 000015B8-00001858       .text calc_acc_wave__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_acc_wave(int, int) {
    /* Nonmatching */
}

/* 00001858-000019CC       .text calc_acc_hit__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_acc_hit(int, int) {
    /* Nonmatching */
}

/* 000019CC-00001AF4       .text calc_spd__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_spd(int, int) {
    /* Nonmatching */
}

/* 00001AF4-00001D34       .text calc_pos_crr__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_pos_crr(int, int) {
    /* Nonmatching */
}

/* 000021F4-00002350       .text calc_pos__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_pos() {
    /* Nonmatching */
    cXyz** bank = (cXyz**)(0x6C0*unk1060+16);
    for(int i = 0; i < 8; i++){
        for(int j = 0; j < 6; j++){
            if(i != 0 || ((unkFD0[i][j][0] & 1) != 0)){
                unk1328 = cXyz::Zero;
                calc_acc_spring(i,j);
                calc_acc_gravity();
                calc_acc_wave(i,j);
                calc_acc_hit(i,j);
                calc_spd(i,j);
                bank[i][j] = bank[i][j]+mMoveVtx.mBuffer[i][j];
                calc_pos_crr(i,j);
            }
        }
    }
}


/* 00002350-00002874       .text calc_nrm__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_nrm() {
    /* Nonmatching */
    int active = unk1060;
    int prev = unk1060;

    for (int i = 0; i < 8; ++i) { // 8 vertical strips
        for (int j = 0; j < 6; j += 1) { // 6 horizontal segments
            cXyz& center = mDrawVtx[0].mBufferVtx[i][j]; // base point
            cXyz& up = mDrawVtx[0].mBufferVtx[i+1][j];
            cXyz& down = mDrawVtx[0].mBufferVtx[i-1][j];

            cXyz& right = mDrawVtx[0].mBufferVtx[i][j+1];
            cXyz& left = mDrawVtx[0].mBufferVtx[i][j-1];



            
            // Get neighbors for tangents
            cXyz tangent;
            if (i == 0) {
                tangent = down - center;
            } else if (i == 7) {
                tangent = center - up;
            } else {
                cXyz v1 = center - up;
                cXyz v2 = down - center;
                cXyz smoothStart = up * 0.57475f;
                smoothStart += v1 * 0.358875f;
                smoothStart += v2 * 0.111375f;
                smoothStart += down* 0.42525f;
                cXyz smoothEnd = up * 0.42525f;
                smoothEnd += v1 * 0.383625f;
                smoothEnd += v2 * 0.136125f;
                smoothEnd += down * 0.57475f;

                tangent = smoothEnd - smoothStart;
            }

            //Get neighbors for bitangents
            cXyz bitangent;
            if (j == 0) {
                bitangent = right - center;
            } else if (j == 5) {
                bitangent = center - left;
            } else {
                cXyz v1 = center - left;
                cXyz v2 = right - center;

                cXyz smoothStart = left * 0.57475f;
                smoothStart += v1 * 0.358875f;
                smoothStart += v2 * 0.111375f;
                smoothStart += right * 0.42525f;

                cXyz smoothEnd = left * 0.42525f;
                smoothEnd += v1 * 0.383625f;
                smoothEnd += v2 * 0.136125f;
                smoothEnd += right * 0.57475f;

                bitangent = smoothEnd - smoothStart;
            }

           // Calculate normal
            cXyz normal;
            normal = bitangent.outprod(tangent);
            if (normal.normalizeRS()) {
                mDrawVtx[0].mBufferNrm[i][j] = normal;
                mDrawVtx[0].mBufferThree[i][j] = normal;
                mDrawVtx[0].mBufferThree[i][j] *= -1.0f;
            }
        }
    }
}

/* 00002874-00002D80       .text calc_wind__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_wind() {
    /* Nonmatching */
}

/* 00002D80-00002F38       .text calc_hit__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_hit() {
    /* Nonmatching */
}

/* 00002F38-00003008       .text calc_fire_leap__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::calc_fire_leap(int, int) {
    /* Nonmatching */
}

/* 00003008-0000331C       .text calc_fire__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::calc_fire() {
    /* Nonmatching */
    u8 local_7b;
    u16 local_60;
    u16 local_58;
    u16 local_d8;
    f32 var_f31;
    if(unk1454 != 0){
        // local_60 = unk145C * 7.0f;
        // local_58 = unk1460 * 5.0f;
        unkFD0[1][(int)local_60][(int)local_58] += 1;
    }
    for(int i = 0; i<8; i++){
        for(int j = 0; j<6; j++){
            if(unkFD0[1][i][j] != 0){
                for(int k = 0; k < 11; k++){
                    cLib_checkBit(unkFD0[1][0][0],(u8)1);
                }
                if((unkFD0[1][i][j]) < local_7b){
                    if ((i == 0) && (((j == 0) && (unk1466 == 1)) || ((j == 5) && (unk1466 == 2)))) {
                        var_f31 = 0.4f;
                    }else{
                        var_f31 = 0.8f;
                    }
                    if(cM_rnd()<var_f31){
                        unkFD0[1][i][j] += 1;
                    }
                    s32 var_r5_2[8][3];
                    //struct_8* var_r4_2 = &l_HIO.field_8;

                    for(int k = 0; k < 11; k++){
                      //  var_r5_2[k][1] = var_r4_2->arr[k][1];
                      //  var_r5_2[k+1][2] = var_r4_2->arr[k][1];
                    }
                    //var_r5_2[0][1] = var_r4_2->arr[0][1];
                    if(unkFD0[1][i][j] >= local_d8){
                        if(!cLib_checkBit(unkFD0[i][j][0],(u8)1)){
                            cLib_onBit(unkFD0[i][j][0],(u8)1);
                            u8 iPlus = i+1;
                            u8 iMinus = i-1;
                            u8 jPlus = j+1;
                            u8 jMinus = j-1;
                            // u32 uVar10 = jMinus >> 0x1F ^ 1;
                            // int iVar6 = ((jPlus ^ 6) >> 1) - ((jPlus ^ 6) & 6);
                            // int iVar7 = ((int)(jPlus ^ 8) >> 1) - ((jPlus ^ 8) & 8);
                            // if(iMinus >= 0){
                            //     calc_fire_leap(iMinus,j);
                            //    //if(cLib_checkBit(iMinus,(u32)7)){
                            //    if(uVar10 != 0){
                            //         calc_fire_leap(iMinus,jMinus);
                            //     }
                            //     //if(cLib_checkBit(iMinus,(u32)7)){
                            //     if(iVar6 < 0){
                            //         calc_fire_leap(iMinus,jPlus);
                            //     }
                            // }
                            // if(iVar7 < 0){
                            //     calc_fire_leap(iPlus,j);
                            //     if(cLib_checkBit(jMinus,(u32)7)){
                            //         calc_fire_leap(iPlus,jMinus);
                            //     }
                            //     //if(cLib_checkBit(jPlus,7)){
                            //     if(iVar6 < 0){
                            //         calc_fire_leap(iPlus,jPlus);
                            //     }
                            // }
                            // if(cLib_checkBit(jMinus,(u32)7)){
                            //     calc_fire_leap(i,jMinus);
                            // }
                            // //if(cLib_checkBit(jPlus,6)){
                            // if(iVar6 < 0){
                            //     calc_fire_leap(i,jPlus);
                            // } 
                            if (iMinus >= 0) {
                                calc_fire_leap( iMinus, j);
                                if (jMinus >= 0) calc_fire_leap( iMinus, jMinus);
                                if (jPlus < 6) calc_fire_leap( iMinus, jPlus);
                            }
                            if (iPlus < 8) {
                                calc_fire_leap( iPlus, j);
                                if (jMinus >= 0) calc_fire_leap( iPlus, jMinus);
                                if (jPlus < 6) calc_fire_leap( iPlus, jPlus);
                            }
                            if (jMinus >= 0) calc_fire_leap( i, jMinus);
                            if (jPlus < 6) calc_fire_leap( i, jPlus);
                        }
                    }
                }
            }
        }
    }
    if(unk1464 == 0){
        int i;
        for(i = 0; i < 6; i++){
            if(!cLib_checkBit(unkFD0[0][i][0],(u8)1)){
                break;
            }

        }
        if(i >= 6){
            unk1464 = 1;
        }
    }
    return;
}

/* 0000331C-0000340C       .text calc__21daObjTapestryPacket_cFP15daObjTapestry_c */
void daObjTapestryPacket_c::calc(daObjTapestry_c* param_1) {
    cMtx_copy(param_1->unk1758->getBaseTRMtx(),mDoMtx_stack_c::get());
    cMtx_copy(mDoMtx_stack_c::get(),unk1334);
    unk13C4 = PSMTXInverse(unk1334,unk1394) != 0;
    unk1060 = unk1060^1;
    calc_wind();
    calc_hit();
    calc_fire();
    calc_pos();
    calc_nrm();
    eff_pos();
    smoke_move(param_1);
    unk1494.plight_move(unk147C,unk1488);
}

/* 0000340C-000034CC       .text set_hit__21daObjTapestryPacket_cF4cXyz4cXyzffb */
void daObjTapestryPacket_c::set_hit(cXyz, cXyz, float, float, bool) {
    /* Nonmatching */
}

/* 000034CC-000034F4       .text get_now_pos__21daObjTapestryPacket_cFii */
cXyz* daObjTapestryPacket_c::get_now_pos(int param_1, int param_2) {
    /* Nonmatching */
    return &mDrawVtx[unk1060].mBufferVtx[param_1][param_2];
}

typedef struct {
    float values[23]; // 92 bytes / 4
} SomeParamBlock;
/* 000034F4-000036C4       .text eff_start__21daObjTapestryPacket_cFii */
void daObjTapestryPacket_c::eff_start(int param_1, int param_2) {
    /* Nonmatching */
    cXyz local_18c;
    SomeParamBlock floatarr;
    if(unk1324 < 0x10){
        if(eff_start_chk(param_1,param_2)){
            daObjTapestryFireEff_c* pCallBack = &unk1064[unk1324];
            //cXyz* pSrc = ;
            cMtx_multVec(unk1334,get_now_pos(param_1,param_2),&local_18c);
            pCallBack->unk14 = local_18c;
            daObjTapestryAttr_c* var_r4 = &l_HIO.field_C;
            for(int i = 0; i < 11; i++){

                floatarr.values[0] = var_r4->unkC[0][0];
                floatarr.values[0] = var_r4->unkC[0][1];
                //temp_r3 = var_r4->unk4;
            }
            // for(int i = 0; i < 11; i++){
            //     floatarr[2*i] = var_r4->unkC[2*i];
            //     //temp_r3 = var_r4->unk4;
            // }
        }
    }
}

/* 000036C4-00003934       .text eff_start_chk__21daObjTapestryPacket_cFii */
u8 daObjTapestryPacket_c::eff_start_chk(int, int) {
    /* Nonmatching */
}

/* 00003934-000039C0       .text eff_end__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::eff_end() {
    /* Nonmatching */
}

/* 000039C0-00003CC0       .text eff_pos__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::eff_pos() {
    /* Nonmatching */
}

/* 00003CC0-00003D3C       .text eff_delete__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::eff_delete() {
    /* Nonmatching */
    for(int i = 0; i < 16; i++){
        unk1064[i].end();
    }
    unk1468.end();
    unk1494.plight_delete();
}

/* 00003D3C-00003D48       .text smokeCallback_init__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::smokeCallback_init() {
    /* Nonmatching */
    unk1468.setRateOff(0);
    return;
}

/* 00003D48-00003E20       .text smoke_set__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::smoke_set() {
    /* Nonmatching */
    static cXyz scl(1.0,1.0,1.0);
    unk1468.end();
    dComIfGp_particle_setToon(0xA329,&unk147C,&unk1488,&scl,0xFF,&unk1468);
    unk1494.plight_make();
    return;
}

/* 00003E20-00003F8C       .text smoke_move__21daObjTapestryPacket_cFP10fopAc_ac_c */
void daObjTapestryPacket_c::smoke_move(fopAc_ac_c* param_1) {

  s16 yaw;
  int iVar4;
  cXyz *pcVar5;
  
  if ((unk1490 > 0) &&
     (unk1490 = unk1490 + -1,
     unk1490 <= 0)) {
    smoke_set();
  }
  //pcVar5 = &unk250[unk1060*3][int(unk145C * 7.0f)][int(unk1460 * 5.0f)];
  yaw = cM_atan2s(pcVar5->x,-pcVar5->z);
  f32 xzdist = std::sqrtf(pcVar5->x*pcVar5->x+pcVar5->z*pcVar5->z);
  iVar4 = cM_atan2s(pcVar5->y,xzdist);
  unk147C = param_1->eyePos;
  unk1488.set(iVar4,yaw,0);
  return;

}


/* 00003F8C-00004090       .text setup_vtx__21daObjTapestryPacket_cFP22daObjTapestryDrawVtx_c */
void daObjTapestryPacket_c::setup_vtx(daObjTapestryDrawVtx_c* param_1) {
    GXClearVtxDesc();
    GXSetVtxDesc(GX_VA_POS,GX_INDEX8);
    GXSetVtxDesc(GX_VA_NRM,GX_INDEX8);
    GXSetVtxDesc(GX_VA_CLR0,GX_INDEX8);
    GXSetVtxDesc(GX_VA_TEX0,GX_INDEX8);
    GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_POS,GX_CLR_RGBA,GX_F32,0);
    GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_NRM,GX_CLR_RGB,GX_F32,0);
    GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_CLR0,GX_CLR_RGBA,GX_RGBA8,0);
    GXSetVtxAttrFmt(GX_VTXFMT0,GX_VA_TEX0,GX_CLR_RGBA,GX_F32,0);
    GXSetArray(GX_VA_POS,param_1->mBufferVtx,0xc);
    GXSetArray(GX_VA_NRM,param_1->mBufferNrm,0xc);
    GXSetArray(GX_VA_CLR0,&l_color,4);
    GXSetArray(GX_VA_TEX0,m_draw_data.tex_coord(),8);

}

/* 00004090-0000410C       .text load_tex__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::load_tex() {
  GXTexObj GStack_28;
    
  GXInitTexObj(&GStack_28,m_draw_data.tex_coord(),0x80,0x80,GX_TF_CMPR,GX_REPEAT,GX_REPEAT,false);
  GXInitTexObjLOD(&GStack_28,GX_LINEAR,GX_LINEAR,0.0f,0.0f,0.0f,GX_FALSE,GX_FALSE,GX_ANISO_1);
  GXLoadTexObj(&GStack_28,GX_TEXMAP0);
}

/* 0000410C-0000418C       .text setup_rendar__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::setup_rendar() {
    GXSetChanCtrl(GX_COLOR0,false,GX_SRC_VTX,GX_SRC_REG,0,GX_DF_CLAMP,GX_AF_SPOT);
    GXSetChanCtrl(GX_ALPHA0,false,GX_SRC_VTX,GX_SRC_REG,0,GX_DF_CLAMP,GX_AF_SPOT);
    GXSetNumTexGens(1);
    GXSetTexCoordGen2(GX_TEXCOORD0,GX_TG_MTX2x4,GX_TG_TEX0,GX_IDENTITY,false,GX_PTIDENTITY);
    return;
}

/* 0000418C-000042F8       .text setup_tev_stage__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::setup_tev_stage() {
    /* Nonmatching */
}

/* 000042F8-000044B8       .text setup_tevColReg__21daObjTapestryPacket_cFP15daObjTapestry_c */
void daObjTapestryPacket_c::setup_tevColReg(daObjTapestry_c* param_1) {
    
    static GXColor kcolor_data[4] = {{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF}};
    kcolor_data[3].a = param_1->unk1AB0*255.5f;
    if(l_HIO.field_68 == 1){
        GXSetTevKColor(GX_KCOLOR0,param_1->tevStr.mColorK0);
        GXSetTevKColor(GX_KCOLOR1,kcolor_data[1]);
        GXSetTevKColor(GX_KCOLOR2,kcolor_data[2]);
        GXSetTevKColor(GX_KCOLOR3,kcolor_data[3]);
        GXSetTevColorS10(GX_TEVREG0,param_1->tevStr.mColorC0);
        GXSetTevColor(GX_TEVREG1,param_1->tevStr.mColorK0);
        GXSetTevColor(GX_TEVREG2,param_1->tevStr.mColorK1);
    }else{
        GXSetTevKColor(GX_KCOLOR0,kcolor_data[0]);
        GXSetTevKColor(GX_KCOLOR1,kcolor_data[1]);
        GXSetTevKColor(GX_KCOLOR2,kcolor_data[2]);
        GXSetTevKColor(GX_KCOLOR3,kcolor_data[3]);
        GXSetTevColorS10(GX_TEVREG0,param_1->tevStr.mColorC0);
        GXSetTevColor(GX_TEVREG1,param_1->tevStr.mColorK0);
        GXSetTevColor(GX_TEVREG2,param_1->tevStr.mColorK1);
    }
}

/* 000044B8-000045C8       .text draw__21daObjTapestryPacket_cFv */
void daObjTapestryPacket_c::draw() {
    /* Nonmatching */
    daObjTapestry_c* user_data = (daObjTapestry_c*)getUserArea();
    dKy_tevstr_c* tev_str = &user_data->tevStr;
    daObjTapestryDrawVtx_c* draw_vtx = &mDrawVtx[unk1060];
    j3dSys.reinitGX();
    GXSetNumIndStages(0);
    dKy_GxFog_tevstr_set(tev_str);
    setup_vtx(draw_vtx);
    load_tex();
    GXSetNumChans(1);
    setup_rendar();
    setup_tev_stage();
    setup_tevColReg(user_data);
    GXCallDisplayList(m_draw_data.dl(),m_draw_data.dl_size());
    GXLoadPosMtxImm(unk1364,0);
    GXLoadPosMtxImm(unk1364,0); 
    GXSetCullMode(GX_CULL_BACK);
    GXCallDisplayList(m_draw_data.m_dl,sizeof(m_draw_data.m_dl));
    GXSetCullMode(GX_CULL_FRONT);
    GXSetArray(GX_VA_NRM,draw_vtx->mBufferThree,0xC);
    GXCallDisplayList(m_draw_data.m_dl,m_draw_data.dl_size());
    //GXCallDisplayList(&m_draw_data[0x180],0x180);
    J3DShape::sOldVcdVatCmd = 0;
    //J3DShape::draw();

}

/* 000045C8-0000461C       .text chk_appear__15daObjTapestry_cFv */
void daObjTapestry_c::chk_appear() {
    /* Nonmatching */
}

/* 0000461C-000046A8       .text set_mtx__15daObjTapestry_cFv */
void daObjTapestry_c::set_mtx() {
    mDoMtx_stack_c::transS(current.pos);
    mDoMtx_stack_c::ZXYrotM(shape_angle);
    unk1758->setBaseTRMtx(mDoMtx_stack_c::get());
    mDoMtx_stack_c::scaleM(scale);
    cMtx_copy(mDoMtx_stack_c::get(),unk1760);
    /* Nonmatching */
}

/* 000046A8-000046E4       .text init_mtx__15daObjTapestry_cFv */
void daObjTapestry_c::init_mtx() {
    /* Nonmatching */
    J3DModel* model = unk1758;
    model->setBaseScale(scale);
    set_mtx();
    return;
}

/* 000046E4-00004708       .text solidHeapCB__15daObjTapestry_cFP10fopAc_ac_c */
int daObjTapestry_c::solidHeapCB(fopAc_ac_c* actor) {
    return create_heap();
}

/* 00004708-00004800       .text create_heap__15daObjTapestry_cFv */
bool daObjTapestry_c::create_heap() {
    /* Nonmatching */


}

/* 00004800-0000482C       .text create_res_load__15daObjTapestry_cFv */
void daObjTapestry_c::create_res_load() {
    /* Nonmatching */
   dComIfG_resLoad(&unk290,l_arcName_Mcrtn);
   return;
}



/* 0000482C-000048C8       .text init_cc__15daObjTapestry_cFv */
void daObjTapestry_c::init_cc() {
    for(int i = 0; i < 2; i++){
        mStts[i].Init(0xFF,0xFF,this);
        mTris[i].Set(l_tri_src);
        mTris[i].SetStts(&mStts[i]);
        mTris[i].OnTgNoHitMark();
    }
    set_cc_pos();
    return;
}
/* 000048C8-00004A30       .text set_cc_pos__15daObjTapestry_cFv */
void daObjTapestry_c::set_cc_pos() {
    static u8 idx_tbl[2][6] = {
        0,0,0,5,7,5,
        0,0,7,5,7,0};
    cXyz local_40;
    cXyz local_4C;
    cXyz local_58;
    /* Nonmatching */
    for(int i = 0; i < 2; i++){
        mDoMtx_stack_c::copy(unk1758->getBaseTRMtx());
        mDoMtx_stack_c::scaleM(1.5f,1.2f,1.5f);
        mDoMtx_stack_c::transM(0.0f,29.700006f,0.0f);//TODO: Wtf?
        mDoMtx_stack_c::multVec(packet.get_now_pos(idx_tbl[i][0],idx_tbl[i][1]),&local_40);
        mDoMtx_stack_c::multVec(packet.get_now_pos(idx_tbl[i][2],idx_tbl[i][3]),&local_4C);
        mDoMtx_stack_c::multVec(packet.get_now_pos(idx_tbl[i][4],idx_tbl[i][5]),&local_58);
        mTris[i].setPos(&local_40,&local_4C,&local_58);
    }
}

/* 00004A30-00004E30       .text checkCollision__15daObjTapestry_cFv */
bool daObjTapestry_c::checkCollision() {
    /* Nonmatching */
    cXyz local_50 = cXyz::Zero;
    cXyz cVar6;
    cXyz local_5c;
    cXyz* pcVar10;
    f32 var_f30;
    f32 var_f31;
    bool o_retval = false;
    for(int i = 0; i < 2; i++){
        mTris[i].ChkTgHit();
        if(mTris[i].ChkTgHit() != 0){
            if(mTris[i].GetTgHitObj()){
                u32 cVar11 = mTris[i].GetAtType();
                pcVar10 = mTris[i].GetTgHitPosP();
                local_50 = *mTris[i].GetTgRVecP();
                if(local_50.normalizeRS() == 0){
                    int uVar3 = shape_angle.y;
                    local_50.set(cM_ssin(uVar3),0.0,cM_scos(uVar3));
                }
                switch(cVar11){
                case 0x10000000:
                case 0x200000:  //Deku leaf
                {
                    local_5c =*mTris[0].GetTgRVecP();
                    f32 sqr = local_5c.abs2();
                    if(sqr > 31684.0f){
                        sqr = std::sqrtf(sqr); 
                    }
                    local_5c *= 178.0f/sqr;
                    break;
                }
                case 0x4000000:

                case 0x1000000:
                case 0x10000:
                    break;
                case 0x200:
                case 0x1000:
                case 0x2000:
                case 0x800:
                case 0x400:
                case 0x80:
                case 0x40:
                case 0x8:
                case 0x2:
                    var_f31 = 0.0f;
                    var_f30 = 0.2f;
                    break;
                case 0x4000:
                case 0x100000:
                case 0x80000:
                case 0x40000:
                case 0x8000:
                    var_f31 = 1.0f;
                    var_f30 = 0.5f;
                    break;
                case 0x20000:
                    var_f31 = 0.0f;
                    var_f30 = 0.2f;
                    o_retval = true;
                    break;
                case 0x20:
                    var_f31 = 2.0f;
                    var_f30 = 0.7f;
                    break;
                    
                }
                packet.unk13C8 = local_5c;

            }

        }
        mTris[i].ClrTgHit();
    }
    if(var_f31 >= 0.0f && pcVar10 != NULL){
        packet.set_hit(*pcVar10,local_50,var_f31,var_f30,o_retval);
    }
    return o_retval;

}

/* 00004E30-00004F2C       .text set_eye_pos__15daObjTapestry_cFv */
void daObjTapestry_c::set_eye_pos() {
    /* Nonmatching */
    cXyz local_18 = (
        *packet.get_now_pos(0,0) +
        *packet.get_now_pos(0,5) +
        *packet.get_now_pos(7,0) +
        *packet.get_now_pos(7,5)
    )*0.25f;
    mDoMtx_multVec(unk1758->getBaseTRMtx(),&local_18,&eyePos);
    attention_info.position = eyePos;
    //mDoMtx_stack_c::multVec(unk1758->getBaseTRMtx(),local_18,)
}

/* 00004F2C-00005168       .text _create__15daObjTapestry_cFv */
cPhs_State daObjTapestry_c::_create() {
    /* Nonmatching */
}

/* 00005560-00005628       .text _delete__15daObjTapestry_cFv */
bool daObjTapestry_c::_delete() {
    /* Nonmatching */
}

/* 00005628-00005730       .text wait_act_proc__15daObjTapestry_cFv */
bool daObjTapestry_c::wait_act_proc() {
    /* Nonmatching */
    char* firstStr = "0";
    char* nextstr = "タペストリ";
    char* fillerstr;
    strcpy(fillerstr,firstStr);   
    strcpy(fillerstr,nextstr);
}

/* 00005730-000057B0       .text demo_request_act_proc__15daObjTapestry_cFv */
bool daObjTapestry_c::demo_request_act_proc() {
    /* Nonmatching */
}

/* 000057B0-000058D8       .text burn_act_proc__15daObjTapestry_cFv */
bool daObjTapestry_c::burn_act_proc() {
    /* Nonmatching */
}

/* 000058D8-00005984       .text burn_act_init_proc__15daObjTapestry_cFv */
void daObjTapestry_c::burn_act_init_proc() {
    /* Nonmatching */
  const daObjTapestryAttr_c* pfVar1;
  f32 *pfVar2;
  int iVar7;
  f32 fStack_6c;
  iVar7 = 0xb;
  //pfVar1 = (f32 *)&l_HIO.intAtEight;
  pfVar1 = &l_HIO.attr();
  pfVar2 = &fStack_6c;

    for(int i = 0; i < 11; i++){
        l_HIO.field_C.unkC[i][0] = pfVar1->unkC[i][0];
        l_HIO.field_C.unkC[i][1] = pfVar1->unkC[i][1];
    }
    unk1AA8 = l_HIO.field_68;
    fopAcM_seStart(this,0x69C1,0);
//   sVar4 = d_com_inf_game::dComIfGp_getReverb((int)(char)(this->parent).current.roomNo);
//   JAIZelBasic::seStart
//             (JAIZelBasic::zel_basic,0x69c1,&(this->parent).eyePos,0,sVar4,1.0,1.0,-1.0,-1.0,0);
  return;

}

/* 00005984-00005994       .text fine_act_init_proc__15daObjTapestry_cFv */
void daObjTapestry_c::fine_act_init_proc() {
    /* Nonmatching */
    fopAcM_OnStatus(this,fopAcStts_NOCULLEXEC_e);
    return;
}

/* 00005994-00005B30       .text setup_action__15daObjTapestry_cFi */
void daObjTapestry_c::setup_action(int param_1) {
    /* Nonmatching */
    static InitProcFunc act_init_proc[4] = {
        NULL,
        NULL,
        &daObjTapestry_c::burn_act_init_proc,
        &daObjTapestry_c::fine_act_init_proc,


    };
    static ActProcFunc act_proc[4] = {
        &daObjTapestry_c::wait_act_proc,
        &daObjTapestry_c::demo_request_act_proc,
        &daObjTapestry_c::burn_act_proc,
        NULL,

    };
    if(act_init_proc[param_1]){
        (this->*act_init_proc[param_1])();
    }
    unk1AB4 = act_proc[param_1];
    unk1AC0 = param_1;
}

/* 00005B30-00005BD0       .text _execute__15daObjTapestry_cFv */
bool daObjTapestry_c::_execute() {
    /* Nonmatching */
    bool bVar2;
    set_eye_pos();
    dBgW* dbgw = unk175C;
    if(dbgw != NULL){
        if(dbgw->GetId() >= 0 && dbgw->GetId() < 0x100){
            bVar2 = true;
        }else{
            bVar2 = false;
        }
        if(bVar2){
            dbgw->Move();
        }
    }
    if(unk1AB4 != NULL){
        (this->*unk1AB4)();
    }
    if(unk1AC0 != 3){
        packet.calc(this);
    }
    return true;

}

/* 00005BD0-00005C44       .text _draw__15daObjTapestry_cFv */
bool daObjTapestry_c::_draw() {

    g_env_light.settingTevStruct(TEV_TYPE_BG0,&current.pos,&tevStr);
    g_env_light.setLightTevColorType(unk1758,&tevStr);
    mDoExt_modelUpdateDL(unk1758);
    if(unk1AC0 != 3){
        packet.update();
    }
    return true;
    
}

/* 00005C44-00005C64       .text daObjTapestry_Create__FP10fopAc_ac_c */
static cPhs_State daObjTapestry_Create(fopAc_ac_c* obj) {
    /* Nonmatching */
    return ((daObjTapestry_c*)obj)->_create();
}

/* 00005C64-00005C88       .text daObjTapestry_Delete__FP15daObjTapestry_c */
static BOOL daObjTapestry_Delete(daObjTapestry_c* obj) {
    /* Nonmatching */
    return obj->_delete();
}

/* 00005C88-00005CAC       .text daObjTapestry_Execute__FP15daObjTapestry_c */
static BOOL daObjTapestry_Execute(daObjTapestry_c* obj) {
    /* Nonmatching */
    return obj->_execute();
}

/* 00005CAC-00005CD0       .text daObjTapestry_Draw__FP15daObjTapestry_c */
static BOOL daObjTapestry_Draw(daObjTapestry_c* obj) {
    /* Nonmatching */
    return obj->_draw();
}

/* 00005CD0-00005CD8       .text daObjTapestry_IsDelete__FP15daObjTapestry_c */
static BOOL daObjTapestry_IsDelete(daObjTapestry_c*) {
    /* Nonmatching */
    return TRUE;
}

static actor_method_class l_daObjTapestry_Method = {
    (process_method_func)daObjTapestry_Create,
    (process_method_func)daObjTapestry_Delete,
    (process_method_func)daObjTapestry_Execute,
    (process_method_func)daObjTapestry_IsDelete,
    (process_method_func)daObjTapestry_Draw,
};

actor_process_profile_definition g_profile_Obj_Tapestry = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_Obj_Tapestry,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daObjTapestry_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ PRIO_Obj_Tapestry,
    /* Actor SubMtd */ &l_daObjTapestry_Method,
    /* Status       */ fopAcStts_NOCULLEXEC_e | fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
